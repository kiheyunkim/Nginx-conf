
#!로 시작하면 설명 #는 일반 주석

#! nginx를 실행하는 유저를 설정함
#! 일반적으로 탈취 당하더라고 ssh를 비롯 접근 및 파일 엑세스가 불가능 한 nobody나 www-data를 사용함
# user  nobody;

#! nginx의 프로세스 실행 가능 수를 지정
#! 일반적으로 코어 수 만큼 할당함.
worker_processes  1;

#! 에러 로그를 남기는 방법
#! 로그레벨은 다음과 같음 info/notice/warn/error/crit/alert/emerg/debug
#! error_log  로그를남길경로 로그레벨
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# nginx의 processId를 어느 경로에 저장할 것인가에 대한 설정
#pid        logs/nginx.pid;

events {
    #! 워커 프로세스 당 동시 접속 수를 지정
    #! 512 또는 1024를 기준으로 지정
    worker_connections  1024;
}


http {
    #! 너무 긴 도메인을 사용할 수 없기 때문에 이 설정을 통해서 해결함.
    server_names_hash_bucket_size 64;   # 기본값 32
    server_names_hash_max_size 8192;    # 기본값 512

    #! http 포트를 통해서 tomcat 등에 접근 하도록 설정
    #! upstream은 컴퓨터에서 데이터를 흘려보내는 의미를 의미하고
    #! 유저 입장에서 봤을때 기준으로는 데이터를 받을때는 downstream, 유저 입장에서 웹 서버 뒤의 서버를 보면 upstream으로 볼 수 있음.
    upstream springBoot {#! http 포트를 지정해주면됨. apache처럼 AJP를 지정할 필요 없음.
        server 127.0.0.1:9000;
    }

    #! 이름 기반의 서버가 존재 하지 않는 경우 403을 리턴시킴.
    #! default_server란 요청된 도메인을 처리할 블록이 없는 경우를 의미함.
    server {
        listen 80 default_server;
        return 403;
    }

    #! http 요청을 받을 포트
    #! 이름 기반으로 가상 호스팅
    server {
        listen 80;
        server_name local.happybean.naver.com;
        location / {                                # 매핑할 주소 / 여기서는 루트 기준 뒤에 오는걸 찾음.
            proxy_pass http://springBoot;
        }
    }

    #! 정적 파일들을 어떻게 처리할지에 대해 명시된 mime.types를 지정하며
    #! 그 외의 파일에 대해서는 application/octet-stream으로 처리한다.
    include       mime.types;
    default_type  application/octet-stream;

    #! 로그에 대한 format을 지정할 수 있음. 그 포멧의 이름은 main
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #! logs/access.log에 format main의 형태로 access Log를 남길 것을 명시
    #access_log  logs/access.log  main;

    #! 아래 3개에 대한 설명(https://thoughts.t37.net/nginx-optimization-understanding-sendfile-tcp-nodelay-and-tcp-nopush-c55cdd276765)
    #! nginx에서 정적 파일을 보낼 것인지를 지정 on|off
    sendfile        on;
    #! 클라이언트로 패킷이 전송되기 전에 버퍼가 가득 찼는지 확인하여, 다 찼으면 패킷을 전송하여 오버헤드를 줄임. on|off
    #tcp_nopush     on;
    #! 소켓이 패킷 크기에 상관없이 버퍼에 데이터를 보내도록 함 on|off
    #tcp_nodelay    on;

    #! 웹서버가 캐싱할 수 있는 커넥션 수. default 100
    #! 너무 많으면 자원 점유에 문제가 생김.
    #keepalive_request 100;

    #! 클라이언트에서 해당 서버로 keepalive 커넥션을 유지할 수 있는 시간을 설정.
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #! 웹서버에서 문서 요청에 대한 응답을 gzip 압축 전송에 대한 설정 on|off
    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
